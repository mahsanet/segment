import 'package:equatable/equatable.dart';

part 'package:segment/src/modules/connection/data/connection_mode_exception.dart';
part 'package:segment/src/modules/connection_meta/data/connection_meta_exception.dart';
part 'package:segment/src/modules/core/data/core_exceptions.dart';

/// Base class for all all client-side exceptions that can be generated by the app
// ignore_for_file: must_be_immutable
sealed class AppException with EquatableMixin implements Exception {
  AppException({
    this.error,
    this.additionalData = '',
    this.isLogged = false,
    this.stackTrace,
  });

  /// additional data for logging to tracker
  final String additionalData;

  final Object? error;

  /// Keeps track of whether or not this error has been logged before
  bool isLogged;

  StackTrace? stackTrace;

  StackTrace defaultStackTrace = StackTrace.current;

  void logged() => isLogged = true;

  @override
  List<Object?> get props => [error, additionalData, isLogged, stackTrace];
}

class ParseAddressException extends AppException {
  ParseAddressException({
    required super.error,
    required String value,
    required StackTrace stackTrace,
  }) : super(
          additionalData: 'invalid value: $value',
          stackTrace: stackTrace,
        );
}

class HttpException extends AppException {
  HttpException({
    required super.error,
    required super.stackTrace,
  });
}

class RequestException extends AppException {
  RequestException({
    required this.statusCode,
    this.reason,
    this.body,
  }) : super(
          additionalData: 'reason: $reason, body: $body',
        );

  String? reason;
  String? body;
  final int statusCode;
}

class JsonDecodeException extends AppException {
  JsonDecodeException({
    required super.error,
    this.body,
  }) : super(
          additionalData: 'response body: $body',
        );

  String? body;
}

class JsonToDtoException extends AppException {
  JsonToDtoException({
    required super.error,
    required super.stackTrace,
  });
}

class SharedPreferencesException extends AppException {
  SharedPreferencesException({
    required super.error,
    required super.stackTrace,
  });
}

class SameAddressException extends AppException {}

class InvalidTypeException extends AppException {}

class FakeTestException extends AppException {}

class LocalAuthException extends AppException {}

class ParseRequestPayloadException extends AppException {}

class NoConfigException extends AppException {}
